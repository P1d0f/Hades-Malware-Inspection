#!/usr/bin/env python3

import yara
import fnmatch
import os
import glob
import argparse
import shutil
import time
import sys
from pathlib import Path


__author__ = 'Mualiful Mizan'
parser = argparse.ArgumentParser(description='Hades Malware Inspection')
parser.add_argument('-d', '--directory', help='Locate Directory to Scan', required=True)
parser.add_argument('-o', '--output', help='For Output to File')
args = parser.parse_args()
path = args.directory
file_list = []
count = 0
not_count = 0
destination_dir = 'quarantine'
results = []
destionation = []

def add_result(line):
    global results
    print(str(line))
    results.append(line)
def add_result1(line1):
    global results
    print(str(line1))
    results.append(line1)  
def save_file():
    global results
    file_name = input("[*] Please enter a fileilename: ")
    file = open("Report/"+file_name, "wt")
    for line in results:
        file.write(line + "\n")
    file.close()
def banneer():
    print('''\n 
                            :##+,                           
                          @@@@@                             
                        .@@@@#                              
                       ,@@@@@                               
                       @@@@@         @                      
                      ,@@@@          #                      
                      @@@@+           :                     
                      @@@@,           #                     
                      @@@@.                                 
                       @@@@         #                       
                      .@ ,@@*     .  @                      
                     ,@     @@: ,    :@                     
                      @      @:       @                     
                      @@     @@      @@                     
                      #@@   @@@  . ,@@                      
                     *@@@@@@@@    @@@@@                     
                      @@+@@@@@      +@*                     
                          .@@@ ,                            
                           @@@@                             
                          ,@@@+                             
                             ,                              
                                                            
                   ,          ,,,                       +   
  R*    ,R         R         R@   @R       R:   R     R   R*
  R,     R         RR        R@    @R      R:   ,     R    *
  R,     R        R,R        R@     R+     R:         R     
  R,     R          R*       R@     RR     R:  ,      RRR   
  RRRRRRRR       *  @R       R@     RR     RRRR,       RRRR 
  R,     R       :   R       R@     RR     R:  ,         #RR
  R,     R           RR      R@     RR     R:              R
  R,     R      R     R      R@     R      R:    #         R
  R.     R            RR     RR    R#      R*    R    R    R
#RRR#  #RRR#  +RR:   @RRR  #RRRR@RR      +RRR@#RRR     @.,R  \n''')

def banner2():
    print('\n == HADES Malware Inspection == \n')
def warnings_callback(warning_type, message):
    if warning_type == yara.CALLBACK_TOO_MANY_MATCHES:
        print(message)
    return yara.CALLBACK_CONTINUE
def convert_bytes(num):
    for x in ['Bs', 'KB', 'MB', 'GB', 'TB']:
        if num < 1024.0:
            return '%3.1f %s' % (num, x)
        num /= 1024.0
def file_size(file_path):
    if os.path.isfile(file_path):
        file_info = os.stat(file_path)
        return convert_bytes(file_info.st_size)
def mycallback(data):
    print(data)
    return yara.CALLBACK_CONTINUE
banneer()
banner2()
rules = yara.compile(filepaths={
    'namespace': 'db/malware-database.yar', 
    'namespace2': 'db/self-sig.yar',
    'namespace3':'db/core.webshell_detection.yar'})
for path, folders, files in os.walk(path):
    for file in files:
        if file.endswith(''):
            file_list.append(os.path.join(path, file))
            continue
for file_path in file_list:
    try:
        match = rules.match(filepath=str(file_path))
        res = str(match)[1:-1]
        size_file = file_size(str(file_path))
        if match:
                match = match["namespace"][0]["rule"]
                #match2 = match["namespace2"][0]["rule"]
                #match3 = match["namespace3"][0]["rule"]
                add_result('[!] '+ file_path +' : ' + match +' MALWARE FOUND')
                #add_result('[!] '+ file_path +' : ' + str(match[0].rule) +' MALWARE FOUND')
                count += 1
                file_name = str(file_path).split("/")[-1]
                count = 1
                shutil.copyfile(file_path, destination_dir + "/" + file_name)
                append = 1
                destination = destination_dir + "/" + file_name
                shutil.copyfile(file_path, destination_dir + "/" + file_name)
                if not os.path.exists(destination):
                	shutil.copyfile(file_path, destination)
                else:
                	while True:
                		if not os.path.exists(destination + f".{append}"):
                			shutil.copyfile(file_path, destination + f".{append}")
                			break
                		else:
                			append +=1

        else:
            #add_result1(f'[*] {filename} :  OK')
            not_count += 1
    except yara.libyara_wrapper.YaraMatchError as e:
        print('[*] ', e)
    #except yara.Error as e:
    #    print('[*] ', e)
    except KeyboardInterrupt:
        print('[*] Keystroke Pressed')
        sys.exit()

print('\n[*] File Infected Malware \t: ', count)
print('[*] File Not Infected Malware \t: ', not_count)
print('[*] Total Size File  \t\t: ', size_file)
time.sleep(1)
print('[*] Malware Copy to Quarantine folder')
if input("[*] Would you like to save to txt file (y/n): ").lower() == "y":
    save_file()
print()
